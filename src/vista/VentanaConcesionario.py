# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VentanaConcesionario.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSortFilterProxyModel, QTimer
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from src.modelo.vo.ConcesionarioVO import Concesionario
from src.vista.funciones import *



class Ui_MainWindow4(object):
    def __init__(self, coord=None):
        self.coordinador = coord
        self.rojo = "#ff0000"
        self.verde = "#00FF00"
        #self.textoIncorrecto = "Revisa el formato"
        #self.error = "Error al añadir o modicar un concesionario"
        #self.error2 = "Revisa el nombre"
        self.completado = "Accion completada con exito"


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1240, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1240, 720))
        #self.label.setStyleSheet("background-image: url(:/direccion/nissan_skyline_gt_r_r34-HD2.jpg);")
        self.label.setText("")
        #self.label.setPixmap(QtGui.QPixmap(":/direccion/nissan_skyline_gt_r_r34-HD2.jpg"))
        self.label.setScaledContents(False)
        self.label.setObjectName("label")
        self.aniadirCon = QtWidgets.QPushButton(self.centralwidget)
        self.aniadirCon.setGeometry(QtCore.QRect(40, 650, 151, 41))
        self.aniadirCon.setObjectName("aniadirCon")
        self.eliminarCon = QtWidgets.QPushButton(self.centralwidget)
        self.eliminarCon.setGeometry(QtCore.QRect(230, 650, 151, 41))
        self.eliminarCon.setObjectName("eliminarCon")
 
        self.ModificarCon = QtWidgets.QPushButton(self.centralwidget)
        self.ModificarCon.setGeometry(QtCore.QRect(420, 650, 151, 41))
        self.ModificarCon.setObjectName("ModificarCon")
        self.BuscarCon = QtWidgets.QPushButton(self.centralwidget)
        self.BuscarCon.setGeometry(QtCore.QRect(620, 650, 151, 41))
        self.BuscarCon.setObjectName("BuscarCon")
        self.frameAniaidir = QtWidgets.QFrame(self.centralwidget)
        self.frameAniaidir.setEnabled(True)
        self.frameAniaidir.setGeometry(QtCore.QRect(460, 30, 301, 541))
        self.frameAniaidir.setStyleSheet("background-color: #282e2a;\n"
"border-radius: 20px;")
        self.frameAniaidir.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameAniaidir.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameAniaidir.setObjectName("frameAniaidir")
        self.Nombre = QtWidgets.QLabel(self.frameAniaidir)
        self.Nombre.setGeometry(QtCore.QRect(40, 10, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Nombre.setFont(font)
        
        self.LineaNombre = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaNombre.setGeometry(QtCore.QRect(40, 70, 220, 31))
        self.LineaNombre.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaNombre.setText("")
        self.LineaNombre.setObjectName("LineaNombre")
        self.Direccion = QtWidgets.QLabel(self.frameAniaidir)
        self.Direccion.setGeometry(QtCore.QRect(40, 120, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Direccion.setFont(font)
        
        self.LineaDireccion = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaDireccion.setGeometry(QtCore.QRect(40, 180, 220, 31))
        self.LineaDireccion.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaDireccion.setText("")
        self.LineaDireccion.setObjectName("LineaDireccion")
        self.botonAniadirModificar = QtWidgets.QPushButton(self.frameAniaidir)
        self.botonAniadirModificar.setGeometry(QtCore.QRect(100, 500, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonAniadirModificar.setFont(font)
        self.botonAniadirModificar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        self.botonAniadirModificar.setText("")
        self.botonAniadirModificar.setObjectName("AniadirModificar")
        self.Incorrecto = QtWidgets.QLabel(self.frameAniaidir)
        self.Incorrecto.setEnabled(True)
        self.Incorrecto.setGeometry(QtCore.QRect(10, 460, 281, 21))
        self.Incorrecto.setObjectName("Incorrecto")
        self.LineaCiudad = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaCiudad.setGeometry(QtCore.QRect(40, 290, 220, 31))
        self.LineaCiudad.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaCiudad.setText("")
        self.LineaCiudad.setObjectName("LineaCiudad")
        self.Ciudad = QtWidgets.QLabel(self.frameAniaidir)
        self.Ciudad.setGeometry(QtCore.QRect(40, 230, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Ciudad.setFont(font)
        
        self.LineaFecha = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaFecha.setGeometry(QtCore.QRect(40, 400, 220, 31))
        self.LineaFecha.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaFecha.setText("")
        self.LineaFecha.setObjectName("LineaFecha")
        self.Fecha = QtWidgets.QLabel(self.frameAniaidir)
        self.Fecha.setGeometry(QtCore.QRect(40, 340, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Fecha.setFont(font)
        
        

        #FRAME 2 HECHO UNICAMENTE PARA EL BOTON ELIMINAR
        self.frame2 = 2
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setEnabled(True)
        self.frame2.setGeometry(QtCore.QRect(460, 30, 301, 300))
        self.frame2.setStyleSheet("background-color: #282e2a;\n"
"border-radius: 20px;")
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        
        self.botonEliminar = QtWidgets.QPushButton(self.frame2)
        self.botonEliminar.setGeometry(QtCore.QRect(100, 250, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonEliminar.setText("Eliminar")
        self.botonEliminar.setFont(font)
        self.botonEliminar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        
        self.Nombre2 = QtWidgets.QLabel(self.frame2)
        self.Nombre2.setGeometry(QtCore.QRect(40, 20, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Nombre2.setFont(font)
        

        self.LineaNombre2 = QtWidgets.QLineEdit(self.frame2)
        self.LineaNombre2.setGeometry(QtCore.QRect(40, 90, 220, 31))
        self.LineaNombre2.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaNombre2.setText("")
        self.LineaNombre2.setObjectName("LineaNombre2")

        self.Incorrecto2 = QtWidgets.QLabel(self.frame2)
        self.Incorrecto2.setEnabled(True)
        self.Incorrecto2.setGeometry(QtCore.QRect(10, 220, 281, 21))
        self.Incorrecto2.setObjectName("Incorrecto2")
        self.Incorrecto2.setVisible(False)
        

        # Creación del QTableView para mostrar las columnas de la base de datos
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(383, 235, 475, 250))
        self.tableView.setObjectName("tableView")

        # Barra de búsqueda
        self.searchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.searchBar.setGeometry(QtCore.QRect(383, 200, 220, 31))
        self.searchBar.setPlaceholderText("Buscar...")
        self.searchBar.setStyleSheet("background-color:white;\n"
                                     "border: 2px solid gray;\n"
                                     "border-radius: 10px;\n"
                                     "padding: 5px;")
        self.searchBar.setObjectName("searchBar")

        # Configuración del modelo de la tabla
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterKeyColumn(-1)  # Filtrar en todas las columnas
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)

        self.tableView.setModel(self.proxy_model)

        MainWindow.setCentralWidget(self.centralwidget)

        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(10, 10, 141, 61))
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")


        #cargo el boton atras
        self.atras = setAtras(self.centralwidget)
        #cargo la ayuda
        self.ayuda = ayuda(self.centralwidget, "Ventana concesionario")
        
        #se lo paso a modoclos
        self.lista = [self.aniadirCon, self.eliminarCon, self.BuscarCon, self.ModificarCon, self.botonEliminar, self.Nombre2, self.botonAniadirModificar]
        self.listaFrames = [self.frameAniaidir, self.frame2]
        self.listaTexto = [self.Nombre, self.Direccion, self.Ciudad, self.Fecha, self.Nombre2]


        #Nombres de cada texto (para el modo oscuro/claro)
        self.Nombre.setObjectName("Nombre")
        self.Direccion.setObjectName("Direccion")
        self.Ciudad.setObjectName("Ciudad")
        self.Fecha.setObjectName("Fecha inauguracion")
        self.Nombre2.setObjectName("Nombre")

        #muestra una pequenia ayuda al poner el raton sobre el boton
        self.aniadirCon.setToolTip("Añadir concesionario")
        self.eliminarCon.setToolTip("Eliminar concesionario")
        self.ModificarCon.setToolTip("Modificar concesionario")
        self.BuscarCon.setToolTip("Buscar concesionario")


        self.checkBox.stateChanged.connect(lambda: modoClOs(self.checkBox, self.label, self.lista, self.listaFrames, self.listaTexto, self.ayuda))
        modoClOs(self.checkBox, self.label, self.lista, self.listaFrames, self.listaTexto, self.ayuda)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.visible()
        #self.mostrasConcesionarios()

    def setCoordinador(self, coord):
        self.coordinador = coord

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Concesionarios"))
        self.aniadirCon.setText(_translate("MainWindow", "Añadir concesionario"))
        self.eliminarCon.setText(_translate("MainWindow", "Eliminar concesionario"))
        self.ModificarCon.setText(_translate("MainWindow", "Modificar concesionario"))
        self.BuscarCon.setText(_translate("MainWindow", "Buscar concesionario"))
        self.checkBox.setText(_translate("MainWindow", "Modo oscuro"))



######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################


    #FUNCIONES ESTETICAS
    def visible(self):
        self.frameAniaidir.setVisible(False)
        self.frame2.setVisible(False)
        self.tableView.setVisible(False)
        self.searchBar.setVisible(False)
        self.ayuda.setVisible(False)
        
        self.aniadirCon.clicked.connect(lambda: toggle_frame_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))
        self.aniadirCon.clicked.connect(lambda: actualizarBotonFrame("Añadir", self.botonAniadirModificar))

        self.eliminarCon.clicked.connect(lambda: frame2_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))
        #self.eliminarCon.clicked.connect(lambda: self.actualizarBotonFrame("Eliminar"))

        self.ModificarCon.clicked.connect(lambda: toggle_frame_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))
        self.ModificarCon.clicked.connect(lambda: actualizarBotonFrame("Modificar", self.botonAniadirModificar))

        self.BuscarCon.clicked.connect(lambda: tablaYbusquedaVisibilidad(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))


######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################

    
    #FUNCIONES QUE TIENEN ALGUNA FUNCIONALIDAD COMO LEER DATOS, PASARLOS A COORDINADOR, ETC
    def obtener_datos_ingresados(self):
        anadirModificar = Concesionario(
            Nombre=self.LineaNombre.text(),
            Direccion=self.LineaDireccion.text(),
            Ciudad=self.LineaCiudad.text(),
            FechaInauguracion=self.LineaFecha.text()
        )

        eliminar = Concesionario(
            Nombre=self.LineaNombre2.text()
        )
        
        
        if anadirModificar.Nombre != "":
            if self.botonAniadirModificar.text() == "Añadir":
                a = self.coordinador.registrarConcesionario(anadirModificar, "aniadir") 
                if a[0] == "Error":
                    actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                    show_incorrecto_for_5_seconds(self.Incorrecto)
                else:
                    actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                    show_incorrecto_for_5_seconds(self.Incorrecto)
                    
            elif self.botonAniadirModificar.text() == "Modificar":
                a = self.coordinador.registrarConcesionario(anadirModificar, "modificar")
                if a[0] == "Error":
                    actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                    show_incorrecto_for_5_seconds(self.Incorrecto)
                else:
                    actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                    show_incorrecto_for_5_seconds(self.Incorrecto) 
            
            self.LineaNombre.setText("")
            self.LineaDireccion.setText("")
            self.LineaCiudad.setText("")
            self.LineaFecha.setText("")


        if eliminar.Nombre != "":
            a = self.coordinador.registrarConcesionario(eliminar, "eliminar")
            #print(a)
            if a[0] == "Error":
                actualizarTextoIncorrecto2(self.Incorrecto2, self.rojo, a[1])
                show_incorrecto_for_5_seconds(self.Incorrecto2)
                
            else:
                actualizarTextoIncorrecto2(self.Incorrecto2, self.verde, self.completado)
                show_incorrecto_for_5_seconds(self.Incorrecto2)
                #self.mostrasConcesionarios()
            
            self.LineaNombre2.setText("")

        
        

    def mostrasConcesionarios(self):
        self.model.removeRows(0, self.model.rowCount())

        a = self.coordinador.obtenerConcesionarios()
        #print(a)
        columnas = ["Nombre", "Dirección", "Ciudad", "Fecha de Inauguración"]
        self.model.setHorizontalHeaderLabels(columnas)
        for fila in a:
            items = [
                QStandardItem(fila['nombre']),
                QStandardItem(fila['direccion']),
                QStandardItem(fila['ciudad']),
                QStandardItem(fila['fecha_inauguracion'])
            ]
            self.model.appendRow(items)

        # Actualizar la vista
        self.tableView.resizeColumnsToContents()

        # Conectar la barra de búsqueda con el filtro del modelo
        self.searchBar.textChanged.connect(self.proxy_model.setFilterRegExp)
            
            
        