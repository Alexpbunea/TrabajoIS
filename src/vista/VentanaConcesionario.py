# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VentanaConcesionario.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSortFilterProxyModel
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from src.modelo.vo.ConcesionarioVO import Concesionario


class Ui_MainWindow4(object):
    def __init__(self, coord=None):
        self.coordinador = coord
        self.rojo = "#ff0000"
        self.verde = "#00FF00"
        #self.textoIncorrecto = "Revisa el formato"
        #self.error = "Error al añadir o modicar un concesionario"
        #self.error2 = "Revisa el nombre"
        self.completado = "Accion completada con exito"


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1240, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1240, 720))
        self.label.setStyleSheet("background-image: url(:/direccion/nissan_skyline_gt_r_r34-HD2.jpg);")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/direccion/nissan_skyline_gt_r_r34-HD2.jpg"))
        self.label.setScaledContents(False)
        self.label.setObjectName("label")
        self.aniadirCon = QtWidgets.QPushButton(self.centralwidget)
        self.aniadirCon.setGeometry(QtCore.QRect(40, 650, 151, 41))
        self.aniadirCon.setObjectName("aniadirCon")
        self.eliminarCon = QtWidgets.QPushButton(self.centralwidget)
        self.eliminarCon.setGeometry(QtCore.QRect(230, 650, 151, 41))
        self.eliminarCon.setObjectName("eliminarCon")
        self.atras = QtWidgets.QPushButton(self.centralwidget)
        self.atras.setGeometry(QtCore.QRect(1160, 650, 51, 51))
        self.atras.setStyleSheet("#atras{\n"
"border-image: url(:/direccion/botonAtrasBlanco.png);\n"
"background-color: transparent;\n"
"background: none;\n"
"border: none;\n"
"background-repeat: none;\n"
"}\n"
"#atras:pressed{\n"
"border-image: url(:/direccion/bottonAtrasBlancoAzul.jpg);\n"
"background-color: transparent;\n"
"background: none;\n"
"border: none;\n"
"background-repeat: none;\n"
"}")
        self.atras.setText("")
        self.atras.setObjectName("atras")
        self.atras.setToolTip("Atras")
        self.ModificarCon = QtWidgets.QPushButton(self.centralwidget)
        self.ModificarCon.setGeometry(QtCore.QRect(420, 650, 151, 41))
        self.ModificarCon.setObjectName("ModificarCon")
        self.BuscarCon = QtWidgets.QPushButton(self.centralwidget)
        self.BuscarCon.setGeometry(QtCore.QRect(620, 650, 151, 41))
        self.BuscarCon.setObjectName("BuscarCon")
        self.frameAniaidir = QtWidgets.QFrame(self.centralwidget)
        self.frameAniaidir.setEnabled(True)
        self.frameAniaidir.setGeometry(QtCore.QRect(460, 30, 301, 541))
        self.frameAniaidir.setStyleSheet("background-color: #282e2a;\n"
"border-radius: 20px;")
        self.frameAniaidir.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameAniaidir.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameAniaidir.setObjectName("frameAniaidir")
        self.Nombre = QtWidgets.QLabel(self.frameAniaidir)
        self.Nombre.setGeometry(QtCore.QRect(40, 10, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Nombre.setFont(font)
        self.Nombre.setObjectName("DNI")
        self.LineaNombre = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaNombre.setGeometry(QtCore.QRect(40, 70, 220, 31))
        self.LineaNombre.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaNombre.setText("")
        self.LineaNombre.setObjectName("LineaNombre")
        self.Direccion = QtWidgets.QLabel(self.frameAniaidir)
        self.Direccion.setGeometry(QtCore.QRect(40, 120, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Direccion.setFont(font)
        self.Direccion.setObjectName("Direccion")
        self.LineaDireccion = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaDireccion.setGeometry(QtCore.QRect(40, 180, 220, 31))
        self.LineaDireccion.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaDireccion.setText("")
        self.LineaDireccion.setObjectName("LineaDireccion")
        self.botonAniadirModificar = QtWidgets.QPushButton(self.frameAniaidir)
        self.botonAniadirModificar.setGeometry(QtCore.QRect(100, 500, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonAniadirModificar.setFont(font)
        self.botonAniadirModificar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        self.botonAniadirModificar.setText("")
        self.botonAniadirModificar.setObjectName("AniadirModificar")
        self.Incorrecto = QtWidgets.QLabel(self.frameAniaidir)
        self.Incorrecto.setEnabled(True)
        self.Incorrecto.setGeometry(QtCore.QRect(10, 460, 281, 21))
        self.Incorrecto.setObjectName("Incorrecto")
        self.LineaCiudad = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaCiudad.setGeometry(QtCore.QRect(40, 290, 220, 31))
        self.LineaCiudad.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaCiudad.setText("")
        self.LineaCiudad.setObjectName("LineaCiudad")
        self.Ciudad = QtWidgets.QLabel(self.frameAniaidir)
        self.Ciudad.setGeometry(QtCore.QRect(40, 230, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Ciudad.setFont(font)
        self.Ciudad.setObjectName("Ciudad")
        self.LineaFecha = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaFecha.setGeometry(QtCore.QRect(40, 400, 220, 31))
        self.LineaFecha.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaFecha.setText("")
        self.LineaFecha.setObjectName("LineaFecha")
        self.Fecha = QtWidgets.QLabel(self.frameAniaidir)
        self.Fecha.setGeometry(QtCore.QRect(40, 340, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Fecha.setFont(font)
        self.Fecha.setObjectName("FechaInauguracion")
        

        #FRAME 2 HECHO UNICAMENTE PARA EL BOTON ELIMINAR
        self.frame2 = 2
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setEnabled(True)
        self.frame2.setGeometry(QtCore.QRect(460, 30, 301, 300))
        self.frame2.setStyleSheet("background-color: #282e2a;\n"
"border-radius: 20px;")
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        
        self.botonEliminar = QtWidgets.QPushButton(self.frame2)
        self.botonEliminar.setGeometry(QtCore.QRect(100, 250, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonEliminar.setText("Eliminar")
        self.botonEliminar.setFont(font)
        self.botonEliminar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        
        self.Nombre2 = QtWidgets.QLabel(self.frame2)
        self.Nombre2.setGeometry(QtCore.QRect(40, 20, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Nombre2.setFont(font)
        self.Nombre2.setObjectName("DNI")

        self.LineaNombre2 = QtWidgets.QLineEdit(self.frame2)
        self.LineaNombre2.setGeometry(QtCore.QRect(40, 90, 220, 31))
        self.LineaNombre2.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaNombre2.setText("")
        self.LineaNombre2.setObjectName("LineaNombre2")

        self.Incorrecto2 = QtWidgets.QLabel(self.frame2)
        self.Incorrecto2.setEnabled(True)
        self.Incorrecto2.setGeometry(QtCore.QRect(10, 220, 281, 21))
        self.Incorrecto2.setObjectName("Incorrecto2")
        self.Incorrecto2.setVisible(False)
        

        # Creación del QTableView para mostrar las columnas de la base de datos
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(383, 235, 475, 250))
        self.tableView.setObjectName("tableView")

        # Barra de búsqueda
        self.searchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.searchBar.setGeometry(QtCore.QRect(383, 200, 220, 31))
        self.searchBar.setPlaceholderText("Buscar...")
        self.searchBar.setStyleSheet("background-color:white;\n"
                                     "border: 2px solid gray;\n"
                                     "border-radius: 10px;\n"
                                     "padding: 5px;")
        self.searchBar.setObjectName("searchBar")

        # Configuración del modelo de la tabla
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterKeyColumn(-1)  # Filtrar en todas las columnas
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)

        self.tableView.setModel(self.proxy_model)

        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.estilosOscuro([self.aniadirCon, self.eliminarCon, self.BuscarCon, self.ModificarCon, self.botonEliminar, self.Nombre2, self.botonAniadirModificar])
        self.visible()
        #self.mostrasConcesionarios()
       
        




    def visible(self):
        self.frameAniaidir.setVisible(False)
        self.frame2.setVisible(False)
        self.tableView.setVisible(False)
        self.searchBar.setVisible(False)
        
        self.aniadirCon.clicked.connect(self.toggle_frame_visibility)
        self.aniadirCon.clicked.connect(lambda: self.actualizarBotonFrame("Añadir"))

        self.eliminarCon.clicked.connect(self.frame2_visibility)
        #self.eliminarCon.clicked.connect(lambda: self.actualizarBotonFrame("Eliminar"))

        self.ModificarCon.clicked.connect(self.toggle_frame_visibility)
        self.ModificarCon.clicked.connect(lambda: self.actualizarBotonFrame("Modificar"))

        

    def toggle_frame_visibility(self):
        if self.frame2.isVisible(): 
            self.frame2_visibility()
        elif self.tableView.isVisible():
            self.tablaYbusquedaVisibilidad()
        current_visibility = self.frameAniaidir.isVisible()
        self.frameAniaidir.setVisible(not current_visibility)
        
 
    def frame2_visibility(self):
        if self.frameAniaidir.isVisible():
            self.toggle_frame_visibility()
        elif self.tableView.isVisible():
            self.tablaYbusquedaVisibilidad
        current_visibility = self.frame2.isVisible()
        self.frame2.setVisible(not current_visibility)

    def tablaYbusquedaVisibilidad(self):
        if self.frameAniaidir.isVisible():
            self.toggle_frame_visibility()
        elif self.frame2.isVisible(): 
            self.frame2_visibility()
        current_visibility = self.tableView.isVisible()
        self.tableView.setVisible(not current_visibility)
        self.searchBar.setVisible(not current_visibility)

    def actualizarBotonFrame(self, palabra):
        self.botonAniadirModificar.setText(palabra)
    

    def setCoordinador(self, coord):
        self.coordinador = coord
    

    def estilosOscuro(self, lista):
        for i in lista:
            i.setStyleSheet("QPushButton {\n"
            "    background-color: transparent;\n"
            "    border: 2px solid white;\n"
            "    color: white;\n"
            "    border-radius: 10px;\n"
            "}\n"
                "QPushButton:pressed {"
                "background-color: #2980b9;"
            "}"
            )

        
    def actualizarTextoIncorrecto2(self,incorrecto, color, nuevo_texto):
        estilo_html = "<html><head/><body><p align=\"center\"><span style=\" color:{};\">{}</span></p></body></html>"
        incorrecto.setText(QtCore.QCoreApplication.translate("MainWindow", estilo_html.format(color, nuevo_texto)))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Concesionarios"))
        self.aniadirCon.setText(_translate("MainWindow", "Añadir concesionario"))
        self.eliminarCon.setText(_translate("MainWindow", "Eliminar concesionario"))
        self.ModificarCon.setText(_translate("MainWindow", "Modificar concesionario"))
        self.BuscarCon.setText(_translate("MainWindow", "Buscar concesionario"))
        self.Nombre.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#ffffff;\">Nombre:</span></p></body></html>"))
        self.Direccion.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#ffffff;\">Direccion:</span></p></body></html>"))
        #self.Incorrecto.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" color:#ff0000;\">Concesionario incorrecto. Vuelve a intentarlo</span></p></body></html>"))
        self.Ciudad.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#ffffff;\">Ciudad:</span></p></body></html>"))
        self.Fecha.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#ffffff;\">FechaInauguracion:</span></p></body></html>"))
        self.Nombre2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#ffffff;\">Nombre:</span></p></body></html>"))
        #self.Incorrecto2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" color:#ff0000;\">Concesionario incorrecto. Vuelve a intentarlo</span></p></body></html>"))



    def obtener_datos_ingresados(self):
        anadirModificar = Concesionario(
            Nombre=self.LineaNombre.text(),
            Direccion=self.LineaDireccion.text(),
            Ciudad=self.LineaCiudad.text(),
            FechaInauguracion=self.LineaFecha.text()
        )

        eliminar = Concesionario(
            Nombre=self.LineaNombre2.text()
        )
        
        
        if anadirModificar.Nombre != "":
            if self.botonAniadirModificar.text() == "Añadir":
                a = self.coordinador.registrarConcesionario(anadirModificar, "aniadir") 
                if a[0] == "Error":
                    self.actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                    self.Incorrecto.setVisible(True)
                else:
                    self.actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                    self.Incorrecto.setVisible(True)
                    
            elif self.botonAniadirModificar.text() == "Modificar":
                a = self.coordinador.registrarConcesionario(anadirModificar, "modificar")
                if a[0] == "Error":
                    self.actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                    self.Incorrecto.setVisible(True)
                else:
                    self.actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                    self.Incorrecto.setVisible(True) 
            
            self.LineaNombre.setText("")
            self.LineaDireccion.setText("")
            self.LineaCiudad.setText("")
            self.LineaFecha.setText("")


        if eliminar.Nombre != "":
            a = self.coordinador.registrarConcesionario(eliminar, "eliminar")
            #print(a)
            if a[0] == "Error":
                self.actualizarTextoIncorrecto2(self.Incorrecto2, self.rojo, a[1])
                self.Incorrecto2.setVisible(True)
                
            else:
                self.actualizarTextoIncorrecto2(self.Incorrecto2, self.verde, self.completado)
                self.Incorrecto2.setVisible(True)
                #self.mostrasConcesionarios()
            
            self.LineaNombre2.setText("")

        
        

    def mostrasConcesionarios(self):
        self.model.removeRows(0, self.model.rowCount())

        a = self.coordinador.obtenerConcesionarios()
        #print(a)
        columnas = ["Nombre", "Dirección", "Ciudad", "Fecha de Inauguración"]
        self.model.setHorizontalHeaderLabels(columnas)
        for fila in a:
            items = [
                QStandardItem(fila['nombre']),
                QStandardItem(fila['direccion']),
                QStandardItem(fila['ciudad']),
                QStandardItem(fila['fecha_inauguracion'])
            ]
            self.model.appendRow(items)

        # Actualizar la vista
        self.tableView.resizeColumnsToContents()

        # Conectar la barra de búsqueda con el filtro del modelo
        self.searchBar.textChanged.connect(self.proxy_model.setFilterRegExp)
        