# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VentanaConcesionario.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSortFilterProxyModel
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtCore import QTimer
from src.modelo.vo.VehiculosVO import Vehiculo
from src.vista.funciones import *


class Ui_MainWindowClientes(object):
    def __init__(self, coord=None):
        self.coordinador = coord
        self.rojo = "#ff0000"
        self.verde = "#00FF00"
        #self.textoIncorrecto = "Revisa el formato"
        #self.error = "Error al añadir o modicar un concesionario"
        #self.error2 = "Revisa el nombre"
        self.completado = "Notificacion enviada al personal"


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1240, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1240, 720))
        #self.label.setStyleSheet("background-image: url(:/direccion/nissan_skyline_gt_r_r34-HD2.jpg);")
        self.label.setText("")
        #self.label.setPixmap(QtGui.QPixmap(":/direccion/nissan_skyline_gt_r_r34-HD2.jpg"))
        self.label.setScaledContents(False)
        self.label.setObjectName("label")


        self.hola = BorderedTextLabel(self.centralwidget)
        self.hola.setGeometry(QtCore.QRect(10, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.hola.setFont(font)
        self.hola.setText("Hola de nuevo")
        self.hola.setObjectName("hola")

        self.hola_2 = BorderedTextLabel(self.centralwidget)
        self.hola_2.setGeometry(QtCore.QRect(220, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.hola_2.setFont(font)
        self.hola_2.setText("")
        self.hola_2.setAlignment(Qt.AlignLeft) 
        self.hola_2.setObjectName("hola_2")

        self.concesionario = concesionario(self.centralwidget)


        self.comprarVeh = QtWidgets.QPushButton(self.centralwidget)
        self.comprarVeh.setGeometry(QtCore.QRect(40, 650, 151, 41))
        self.comprarVeh.setObjectName("comprarVeh")
        
        self.repararVeh = QtWidgets.QPushButton(self.centralwidget)
        self.repararVeh.setGeometry(QtCore.QRect(230, 650, 151, 41))
        self.repararVeh.setObjectName("repararVeh")
        
        self.BuscarVeh = QtWidgets.QPushButton(self.centralwidget)
        self.BuscarVeh.setGeometry(QtCore.QRect(420, 650, 151, 41))
        self.BuscarVeh.setObjectName("BuscarVeh")
        
        self.frameAniaidir = QtWidgets.QFrame(self.centralwidget)
        self.frameAniaidir.setEnabled(True)
        self.frameAniaidir.setGeometry(QtCore.QRect(460, 190, 301, 300))

        self.frameAniaidir.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameAniaidir.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameAniaidir.setObjectName("frameAniaidir")

        self.IDvehiculo = QtWidgets.QLabel(self.frameAniaidir)
        self.IDvehiculo.setGeometry(QtCore.QRect(40, 20, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDvehiculo.setFont(font)
        
        
        self.LineaID = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaID.setGeometry(QtCore.QRect(40, 90, 220, 31))
        self.LineaID.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.botonComprarVeh = QtWidgets.QPushButton(self.frameAniaidir)
        self.botonComprarVeh.setGeometry(QtCore.QRect(100, 250, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonComprarVeh.setFont(font)
        self.botonComprarVeh.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        self.botonComprarVeh.setText("Comprar")
        self.botonComprarVeh.setObjectName("botonComprarVeh")
        
        self.Incorrecto = QtWidgets.QLabel(self.frameAniaidir)
        self.Incorrecto.setEnabled(True)
        self.Incorrecto.setGeometry(QtCore.QRect(10, 220, 281, 21))
        self.Incorrecto.setObjectName("Incorrecto")
        
        
        
        



        #FRAME 2 HECHO UNICAMENTE PARA LA ACCION REPARAR
        self.frame2 = 2
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setEnabled(True)
        self.frame2.setGeometry(QtCore.QRect(460, 190, 301, 300))
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        
        self.botonReparar = QtWidgets.QPushButton(self.frame2)
        self.botonReparar.setGeometry(QtCore.QRect(100, 250, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonReparar.setText("Reparar")
        self.botonReparar.setFont(font)
        self.botonReparar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        
        self.IDvehiculoRepara = QtWidgets.QLabel(self.frame2)
        self.IDvehiculoRepara.setGeometry(QtCore.QRect(40, 20, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDvehiculoRepara.setFont(font)
        

        self.LineaIDvehiculoRepara = QtWidgets.QLineEdit(self.frame2)
        self.LineaIDvehiculoRepara.setGeometry(QtCore.QRect(40, 90, 220, 31))
        self.LineaIDvehiculoRepara.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaIDvehiculoRepara.setText("")
        self.LineaIDvehiculoRepara.setObjectName("LineaIDvehiculoRepara")

        self.Incorrecto2 = QtWidgets.QLabel(self.frame2)
        self.Incorrecto2.setEnabled(True)
        self.Incorrecto2.setGeometry(QtCore.QRect(10, 220, 281, 21))
        self.Incorrecto2.setObjectName("Incorrecto2")
        self.Incorrecto2.setVisible(False)
        
        # Creación del QTableView para mostrar las columnas de la base de datos
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(305, 235, 630, 250))
        self.tableView.setObjectName("tableView")

        # Barra de búsqueda
        self.searchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.searchBar.setGeometry(QtCore.QRect(305, 200, 220, 31))
        self.searchBar.setPlaceholderText("Buscar...")
        self.searchBar.setStyleSheet("background-color:white;\n"
                                     "border: 2px solid gray;\n"
                                     "border-radius: 10px;\n"
                                     "padding: 5px;")
        self.searchBar.setObjectName("searchBar")

        # Configuración del modelo de la tabla
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterKeyColumn(-1)  # Filtrar en todas las columnas
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)

        self.tableView.setModel(self.proxy_model)

        MainWindow.setCentralWidget(self.centralwidget)

        #check box del modo oscuro
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(10, 50, 141, 61))
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")
        

        #cargo el boton atras
        self.atras = setAtras(self.centralwidget)
        #self.ayuda = ayuda(self.centralwidget, "Ventana para clientes")



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

        #Nombres de cada texto (para el modo oscuro/claro)
        self.IDvehiculo.setObjectName("IDvehiculo")
        self.IDvehiculoRepara.setObjectName("IDvehiculoRepara") #esto es para lo de eliminar


        #muestra una pequenia ayuda al poner el raton sobre el boton
        self.comprarVeh.setToolTip("Comprar vehiculo")
        self.repararVeh.setToolTip("Reparar vehiculo")
        self.BuscarVeh.setToolTip("Buscar vehiculo")


        self.lista = [self.comprarVeh, self.repararVeh, self.BuscarVeh, self.IDvehiculoRepara, self.botonComprarVeh, self.botonReparar]
        self.listaFrames = [self.frameAniaidir, self.frame2]
        self.listaTexto = [self.IDvehiculo, self.IDvehiculoRepara]
        
        
        
        #POR DEFECTO ACTIVO EL MODO OSCURO
        self.checkBox.stateChanged.connect(lambda: modoClOs(self.checkBox, self.label, self.lista, self.listaFrames, self.listaTexto))
        modoClOs(self.checkBox, self.label, self.lista, self.listaFrames, self.listaTexto)
        
        self.visible()
        #self.mostrasConcesionarios()
       

    def visible(self):
        self.frameAniaidir.setVisible(False)
        self.frame2.setVisible(False)
        self.tableView.setVisible(False)
        self.searchBar.setVisible(False)
        
        
        self.comprarVeh.clicked.connect(lambda: toggle_frame_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar))
        

        self.repararVeh.clicked.connect(lambda: frame2_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar))
        
        self.BuscarVeh.clicked.connect(lambda: tablaYbusquedaVisibilidad(self.frameAniaidir, self.frame2, self.tableView, self.searchBar))


    def setCoordinador(self, coord):
        self.coordinador = coord
    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Clientes"))
        self.comprarVeh.setText(_translate("MainWindow", "Comprar vehiculo"))
        self.repararVeh.setText(_translate("MainWindow", "Reparar vehiculo"))
        self.BuscarVeh.setText(_translate("MainWindow", "Buscar vehiculo"))
        self.checkBox.setText(_translate("MainWindow", "Modo oscuro"))


######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################


    def obtener_datos_ingresados(self, dondeEstoy, quienSoy=None):
        compraVehiculo = Vehiculo(
            IDvehiculo=self.LineaID.text()
        )

        reparaVehiculo = Vehiculo(
            IDvehiculo=self.LineaIDvehiculoRepara.text()
        )

        if compraVehiculo.IDvehiculo != "":
            a = self.coordinador.registrarNotificacionCompra(compraVehiculo, "Comprar", dondeEstoy, quienSoy)
            if a[0] == "Error":
                actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                show_incorrecto_for_5_seconds(self.Incorrecto)
            else:
                actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                show_incorrecto_for_5_seconds(self.Incorrecto)
            self.LineaID.setText("")

        elif reparaVehiculo.IDvehiculo != "":
            a = self.coordinador.registrarNotificacionCompra(compraVehiculo, "Reparar", dondeEstoy, quienSoy)
            if a[0] == "Error":
                actualizarTextoIncorrecto2(self.Incorrecto2, self.rojo, a[1])
                show_incorrecto_for_5_seconds(self.Incorrecto2)
                
            else:
                actualizarTextoIncorrecto2(self.Incorrecto2, self.verde, self.completado)
                show_incorrecto_for_5_seconds(self.Incorrecto2)
                #self.mostrasConcesionarios()
            
            self.LineaIDvehiculoRepara.setText("")
            



    def mostrarVehiculos(self, concesionario_filtro=None):
        self.model.removeRows(0, self.model.rowCount())
        # Obtener los vehículos
        vehiculos = self.coordinador.obtenerVehiculos()

        # Definir las columnas del modelo
        columnas = ["IDvehiculo", "Marca", "Modelo", "Año", "Combustible", "Kilometros", "Precio"] #"Concesionario"]
        self.model.setHorizontalHeaderLabels(columnas)

        # Filtrar los vehículos por el concesionario especificado
        if concesionario_filtro is not None:
            vehiculos = [vehiculo for vehiculo in vehiculos if vehiculo['Concesionario'] == concesionario_filtro]

        # Agregar las filas al modelo
        for vehiculo in vehiculos:
            items = [
                QStandardItem(vehiculo['IDvehiculo']),
                QStandardItem(vehiculo['Marca']),
                QStandardItem(vehiculo['Modelo']),
                QStandardItem(str(vehiculo['Año'])),
                QStandardItem(vehiculo['Combustible']),
                QStandardItem(str(vehiculo['Kilometros'])),
                QStandardItem(str(vehiculo['Precio'])),
                #QStandardItem(vehiculo['Concesionario']),
            ]
            self.model.appendRow(items)

        # Actualizar la vista
        self.tableView.resizeColumnsToContents()

        # Conectar la barra de búsqueda con el filtro del modelo
        self.searchBar.textChanged.connect(self.proxy_model.setFilterRegExp)



    
            
        