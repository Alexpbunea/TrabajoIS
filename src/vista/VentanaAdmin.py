# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VentanaAdmin.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from src.vista.funciones import *


class BorderedTextLabel(QtWidgets.QLabel):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setStyleSheet("color: white;")  # Set text color to white
        

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        pen = QtGui.QPen(QtCore.Qt.black, 2, QtCore.Qt.SolidLine)
        painter.setPen(pen)

        # Draw the text with a border
        for dx in range(-1, 2):
            for dy in range(-1, 2):
                if dx != 0 or dy != 0:
                    painter.drawText(self.rect().adjusted(dx, dy, dx, dy), QtCore.Qt.AlignCenter, self.text())

        # Draw the text itself
        pen.setColor(QtCore.Qt.white)
        painter.setPen(pen)
        painter.drawText(self.rect(), QtCore.Qt.AlignCenter, self.text())
        painter.end()



class Ui_MainWindow3(object):
    def __init__(self, coord=None):
        self.coordinador = coord

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1240, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.imagen = QtWidgets.QLabel(self.centralwidget)
        self.imagen.setGeometry(QtCore.QRect(0, 0, 1240, 720))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.imagen.sizePolicy().hasHeightForWidth())
        self.imagen.setSizePolicy(sizePolicy)
        self.imagen.setText("")
        self.imagen.setScaledContents(True)
        self.imagen.setObjectName("imagen")

        self.hola = BorderedTextLabel(self.centralwidget)
        self.hola.setGeometry(QtCore.QRect(10, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.hola.setFont(font)
        self.hola.setObjectName("hola")

        self.hola_2 = BorderedTextLabel(self.centralwidget)
        self.hola_2.setGeometry(QtCore.QRect(220, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.hola_2.setFont(font)
        self.hola_2.setText("")
        self.hola_2.setObjectName("hola_2")

        self.Trabajador = QtWidgets.QPushButton(self.centralwidget)
        self.Trabajador.setGeometry(QtCore.QRect(400, 650, 151, 41))
        self.Trabajador.setObjectName("Trabajador")
        self.Trabajador.setToolTip("A単ade, elimina o modifica trabajadores")

        self.Taller = QtWidgets.QPushButton(self.centralwidget)
        self.Taller.setGeometry(QtCore.QRect(580, 650, 151, 41))
        self.Taller.setObjectName("Taller")
        self.Taller.setToolTip("A単ade, elimina o modifica piezas en un taller")

        self.Cliente = QtWidgets.QPushButton(self.centralwidget)
        self.Cliente.setGeometry(QtCore.QRect(210, 650, 151, 41))
        self.Cliente.setObjectName("Cliente")
        self.Cliente.setToolTip("A単ade, elimina o modifica clientes")

        self.Concesionario = QtWidgets.QPushButton(self.centralwidget)
        self.Concesionario.setGeometry(QtCore.QRect(20, 650, 151, 41))
        self.Concesionario.setObjectName("Concesionario")
        self.Concesionario.setToolTip("A単ade, elimina, modifica o busca concesionarios")

        self.Almacen = QtWidgets.QPushButton(self.centralwidget)
        self.Almacen.setGeometry(QtCore.QRect(760, 650, 151, 41))
        self.Almacen.setObjectName("Almacen")
        self.Almacen.setToolTip("Almacen")

        #self.combo_box = QtWidgets.QComboBox(self.centralwidget)
        #self.combo_box.setGeometry(1040, 10, 180, 30)
        #self.combo_box.setStyleSheet("background-color: transparent; border: 2px solid white; color: white; border-radius: 10px;")

        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(10, 50, 141, 61))
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")
        
        #cargo el boton atras
        self.atras = setAtras(self.centralwidget)
        
        
        self.lista = [self.Concesionario, self.Cliente, self.Trabajador, self.Taller, self.Almacen]
        
        
        self.checkBox.stateChanged.connect(lambda: modoClOs(self.checkBox, self.imagen, self.lista))
        modoClOs(self.checkBox, self.imagen, self.lista)
        
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ventana del administrador"))
        self.hola.setText(_translate("MainWindow", "Hola de nuevo"))
        self.Trabajador.setText(_translate("MainWindow", "Trabajadores"))
        self.Taller.setText(_translate("MainWindow", "Talleres"))
        self.Cliente.setText(_translate("MainWindow", "Clientes"))
        self.Concesionario.setText(_translate("MainWindow", "Concesionarios"))
        self.Almacen.setText(_translate("MainWindow", "Almacenes"))
        self.checkBox.setText(_translate("MainWindow", "Modo oscuro"))


    def setCoordinador(self, coord) -> None:
        self.coordinador = coord
    
#import botonAtrasBlanco
#import botonAtrasBlancoAzul
#import botonAtras
#import nissan2
#import nissanGtrClaro

"""
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
"""