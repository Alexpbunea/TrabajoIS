# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VentanaAdmin.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSortFilterProxyModel
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtCore import QTimer
from src.modelo.vo.VentasVO import Venta
from src.vista.funciones import *

class Ui_MainWindow_Personal(object):
    def __init__(self, coord=None):
        self.coordinador = coord
        self.rojo = "#ff0000"
        self.verde = "#00FF00"
        #self.textoIncorrecto = "Revisa el formato"
        #self.error = "Error al añadir o modicar un concesionario"
        #self.error2 = "Revisa el nombre"
        self.completado = "Accion completada con exito"

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1240, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.imagen = QtWidgets.QLabel(self.centralwidget)
        self.imagen.setGeometry(QtCore.QRect(0, 0, 1240, 720))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.imagen.sizePolicy().hasHeightForWidth())
        self.imagen.setSizePolicy(sizePolicy)
        self.imagen.setText("")
        self.imagen.setScaledContents(True)
        self.imagen.setObjectName("imagen")

        self.hola = BorderedTextLabel(self.centralwidget)
        self.hola.setGeometry(QtCore.QRect(10, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.hola.setFont(font)
        self.hola.setObjectName("hola")

        self.hola_2 = BorderedTextLabel(self.centralwidget)
        self.hola_2.setGeometry(QtCore.QRect(220, 10, 211, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        font.setBold(True)
        font.setWeight(75)
        self.hola_2.setFont(font)
        self.hola_2.setText("")
        self.hola_2.setAlignment(Qt.AlignLeft) 
        self.hola_2.setObjectName("hola_2")

        self.c = concesionario(self.centralwidget)

        self.Notificaciones = QtWidgets.QPushButton(self.centralwidget)
        self.Notificaciones.setGeometry(QtCore.QRect(20, 650, 151, 41))
        self.Notificaciones.setObjectName("Notificaciones")
        self.Notificaciones.setToolTip("Notificaciones")

        self.vender = QtWidgets.QPushButton(self.centralwidget)
        self.vender.setGeometry(QtCore.QRect(210, 650, 151, 41))#(QtCore.QRect(580, 650, 151, 41))(QtCore.QRect(400, 650, 151, 41))
        self.vender.setObjectName("Vender")
        self.vender.setToolTip("Añade una venta")

        #self.Cliente = QtWidgets.QPushButton(self.centralwidget)
        #self.Cliente.setGeometry
        #self.Cliente.setObjectName("Cliente")
        #self.Cliente.setToolTip("Añade, elimina o modifica clientes")

        #self.Concesionario = QtWidgets.QPushButton(self.centralwidget)
        #self.Concesionario.setGeometry(QtCore.QRect(20, 650, 151, 41))
        #self.Concesionario.setObjectName("Concesionario")
        #self.Concesionario.setToolTip("Añade, elimina, modifica o busca concesionarios")

        self.Almacen = QtWidgets.QPushButton(self.centralwidget)
        self.Almacen.setGeometry(QtCore.QRect(400, 650, 151, 41))#(QtCore.QRect(760, 650, 151, 41))
        self.Almacen.setObjectName("Almacen")
        self.Almacen.setToolTip("Almacen")

        self.taller = QtWidgets.QPushButton(self.centralwidget)
        self.taller.setGeometry(QtCore.QRect(590, 650, 151, 41))
        self.taller.setObjectName("taller")
        self.taller.setToolTip("Taller")

        self.frameAniaidir = QtWidgets.QFrame(self.centralwidget)
        self.frameAniaidir.setEnabled(True)
        self.frameAniaidir.setGeometry(QtCore.QRect(360, 30, 520, 541))

        self.frameAniaidir.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameAniaidir.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameAniaidir.setObjectName("frameAniaidir")

        self.IDventa = QtWidgets.QLabel(self.frameAniaidir)
        self.IDventa.setGeometry(QtCore.QRect(26, 10, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDventa.setFont(font)
        
        
        self.LineaID = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaID.setGeometry(QtCore.QRect(26, 70, 220, 31))
        self.LineaID.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        
        self.fechaVenta = QtWidgets.QLabel(self.frameAniaidir)
        self.fechaVenta.setGeometry(QtCore.QRect(26, 110, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.fechaVenta.setFont(font)
        
        
        self.LineafechaVenta = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineafechaVenta.setGeometry(QtCore.QRect(26, 170, 220, 31))
        self.LineafechaVenta.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineafechaVenta.setText("")
        self.LineafechaVenta.setObjectName("LineafechaVenta")


        self.IDvehiculo = QtWidgets.QLabel(self.frameAniaidir)
        self.IDvehiculo.setGeometry(QtCore.QRect(26, 210, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDvehiculo.setFont(font)
        
        
        self.LineaIDvehiculo = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaIDvehiculo.setGeometry(QtCore.QRect(26, 270, 220, 31))
        self.LineaIDvehiculo.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaIDvehiculo.setText("")
        self.LineaIDvehiculo.setObjectName("LineaIDvehiculo")
        
        self.repara = QtWidgets.QLabel(self.frameAniaidir)
        self.repara.setGeometry(QtCore.QRect(26, 310, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.repara.setFont(font)
        
        
        self.Linearepara = QtWidgets.QLineEdit(self.frameAniaidir)
        self.Linearepara.setGeometry(QtCore.QRect(26, 370, 220, 31))
        self.Linearepara.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.Linearepara.setText("")
        self.Linearepara.setObjectName("Linearepara")
        
        self.IDcliente = QtWidgets.QLabel(self.frameAniaidir)
        self.IDcliente.setGeometry(QtCore.QRect(273, 10, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDcliente.setFont(font)
        
        
        self.LineaIDcliente = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaIDcliente.setGeometry(QtCore.QRect(273, 70, 220, 31))
        self.LineaIDcliente.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaIDcliente.setText("")
        self.LineaIDcliente.setObjectName("LineaIDcliente")

        self.piezas = QtWidgets.QLabel(self.frameAniaidir)
        self.piezas.setGeometry(QtCore.QRect(273, 110, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.piezas.setFont(font)
        
        
        self.LineaPiezas = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaPiezas.setGeometry(QtCore.QRect(273, 170, 220, 31))
        self.LineaPiezas.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaPiezas.setText("")
        self.LineaPiezas.setObjectName("LineaPiezas")


        self.cantidad = QtWidgets.QLabel(self.frameAniaidir)
        self.cantidad.setGeometry(QtCore.QRect(273, 210, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cantidad.setFont(font)
        

        self.Lineacantidad = QtWidgets.QLineEdit(self.frameAniaidir)
        self.Lineacantidad.setGeometry(QtCore.QRect(273, 270, 220, 31))
        self.Lineacantidad.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.Lineacantidad.setText("")
        self.Lineacantidad.setObjectName("Lineacantidad")
        


        self.Concesionario = QtWidgets.QLabel(self.frameAniaidir)
        self.Concesionario.setGeometry(QtCore.QRect(273, 310, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Concesionario.setFont(font)
        

        self.LineaConc = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaConc.setGeometry(QtCore.QRect(273, 370, 220, 31))
        self.LineaConc.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaConc.setText("")
        self.LineaConc.setObjectName("LineaConc")
        self.LineaConc.setReadOnly(True)

        self.botonAniadirModificar = QtWidgets.QPushButton(self.frameAniaidir)
        self.botonAniadirModificar.setGeometry(QtCore.QRect(210, 500, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonAniadirModificar.setFont(font)
        self.botonAniadirModificar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        self.botonAniadirModificar.setText("")
        self.botonAniadirModificar.setObjectName("AniadirModificar")
        
        self.Incorrecto = QtWidgets.QLabel(self.frameAniaidir)
        self.Incorrecto.setEnabled(True)
        self.Incorrecto.setGeometry(QtCore.QRect(10, 460, 500, 21))
        self.Incorrecto.setObjectName("Incorrecto")

        # Creación del QTableView para mostrar las columnas de la base de datos
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(420, 235, 400, 250))
        self.tableView.setObjectName("tableView")


        # Barra de búsqueda
        self.searchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.searchBar.setGeometry(QtCore.QRect(420, 200, 220, 31))
        self.searchBar.setPlaceholderText("Buscar...")
        self.searchBar.setStyleSheet("background-color:white;\n"
                                     "border: 2px solid gray;\n"
                                     "border-radius: 10px;\n"
                                     "padding: 5px;")
        self.searchBar.setObjectName("searchBar")

        # Configuración del modelo de la tabla
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterKeyColumn(-1)  # Filtrar en todas las columnas
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)

        self.tableView.setModel(self.proxy_model)

        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(10, 50, 141, 61))
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")
        
        #cargo el boton atras
        self.atras = setAtras(self.centralwidget)
        self.IDventa.setObjectName("IDventa")
        self.fechaVenta.setObjectName("Fecha venta")
        self.IDvehiculo.setObjectName("IDvehiculo")
        self.repara.setObjectName("Repara")
        self.IDcliente.setObjectName("IDcliente")
        self.piezas.setObjectName("Piezas")
        self.cantidad.setObjectName("Cantidad")
        self.Concesionario.setObjectName("Concesionario")
        
        
        self.lista = [self.Notificaciones, self.vender, self.taller, self.Almacen, self.botonAniadirModificar]
        self.listaFrames = [self.frameAniaidir]
        self.listaTexto = [self.IDventa, self.fechaVenta, self.IDvehiculo, self.repara, self.piezas, self.cantidad, self.IDcliente, self.Concesionario]
        
        self.visible()
        self.LineaID.setReadOnly(True)
        self.checkBox.stateChanged.connect(lambda: modoClOs(self.checkBox, self.imagen, self.lista, self.listaFrames, self.listaTexto))
        modoClOs(self.checkBox, self.imagen, self.lista, self.listaFrames, self.listaTexto)
        
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def funcionVisible(self):
        if self.frameAniaidir.isVisible():
            self.frameAniaidir.setVisible(False)
        c = self.tableView.isVisible()
        self.tableView.setVisible(not c)
        self.searchBar.setVisible(not c)
    def funcionVisible2(self):
        if self.tableView.isVisible():
            self.tableView.setVisible(False)
            self.searchBar.setVisible(False)
        c = self.frameAniaidir.isVisible()
        self.frameAniaidir.setVisible(not c)


    def visible(self):
        self.frameAniaidir.setVisible(False)
        self.tableView.setVisible(False)
        self.searchBar.setVisible(False)
        
        self.Notificaciones.clicked.connect(lambda: self.funcionVisible())
        
        self.vender.clicked.connect(lambda: self.funcionVisible2())
        self.vender.clicked.connect(lambda: actualizarBotonFrame("Añadir", self.botonAniadirModificar))
        self.vender.clicked.connect(lambda: self.LineaID.setText("Se asigna automaticamente"))
        

        self.taller.clicked.connect(lambda: self.funcionVisible())
        self.Almacen.clicked.connect(lambda: self.funcionVisible())


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ventana del personal"))
        self.hola.setText(_translate("MainWindow", "Hola de nuevo"))
        self.Notificaciones.setText(_translate("MainWindow", "Notificaciones"))
        self.taller.setText(_translate("MainWindow", "Taller"))
        self.vender.setText(_translate("MainWindow", "Vender"))
        self.Almacen.setText(_translate("MainWindow", "Almacen"))
        self.checkBox.setText(_translate("MainWindow", "Modo oscuro"))


    def setCoordinador(self, coord) -> None:
        self.coordinador = coord
    




    def obtener_datos_ingresados(self, dondeEstoy=None, quienSoy=None):
        anadirModificar = Venta(
           IDventa= self.LineaID.text(),
           FechaVenta= self.LineafechaVenta.text(),
           IDvehiculo= self.LineaIDvehiculo.text(),
           Repara=self.Linearepara.text(),
           IDcliente=self.LineaIDcliente.text(),
           Piezas=self.LineaPiezas.text(),
           Cantidad=self.Lineacantidad.text(),
           Concesionario=self.LineaConc.text(),
        )

        
        if anadirModificar.FechaVenta != "":
            if self.botonAniadirModificar.text() == "Añadir":
                a = self.coordinador.registrarVenta(anadirModificar, "aniadir", quienSoy) 
                if a[0] == "Error":
                    actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                    show_incorrecto_for_5_seconds(self.Incorrecto)
                else:
                    actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                    show_incorrecto_for_5_seconds(self.Incorrecto)
            
            #self.LineaID.setText("")
            self.LineafechaVenta.setText("")
            self.LineaIDvehiculo.setText("")
            self.Linearepara.setText("")
            self.LineaIDcliente.setText("")
            self.LineaPiezas.setText("")
            self.Lineacantidad.setText("")
            if dondeEstoy is None:
                self.LineaConc.setText("")

    def mostrarNotificaciones(self, dondeEstoy=None):
        self.model.removeRows(0, self.model.rowCount())

        notificaciones = self.coordinador.obtenerNotificaciones()

        if dondeEstoy is not None:
            notificaciones = [notificacion for notificacion in notificaciones if notificacion['Concesionario'] == dondeEstoy]

        columnas = ["IDvehiculo","IDcliente" ,"Tipo", "Estado", "Concesionario"]
        self.model.setHorizontalHeaderLabels(columnas)
        
        for fila in notificaciones:
            items = [
                QStandardItem(str(fila['IDnotificacion'])),
                QStandardItem(str(fila['IDcliente'])),
                QStandardItem(str(fila['Tipo'])),
                QStandardItem(str(fila['Estado'])),
                QStandardItem(str(fila['Concesionario']))
            ]
            self.model.appendRow(items)

        # Actualizar la vista
        self.tableView.resizeColumnsToContents()

        # Conectar la barra de búsqueda con el filtro del modelo
        self.searchBar.textChanged.connect(self.proxy_model.setFilterRegExp)



    def mostrarAlmacenes(self, dondeEstoy=None):
        self.model.removeRows(0, self.model.rowCount())

        a = self.coordinador.obtenerPiezas()

        if dondeEstoy is not None:
            a = [pieza for pieza in a if pieza['Concesionario'] == dondeEstoy]
        #print(a)
        columnas = ["Pieza", "Cantidad", "Precio", "Concesionario"]
        self.model.setHorizontalHeaderLabels(columnas)
        for fila in a:
            items = [
                QStandardItem(str(fila['Pieza'])),
                QStandardItem(str(fila['Cantidad'])),
                QStandardItem(str(fila['Precio'])),
                QStandardItem(str(fila['Concesionario']))
            ]
            self.model.appendRow(items)

        # Actualizar la vista
        self.tableView.resizeColumnsToContents()

        # Conectar la barra de búsqueda con el filtro del modelo
        self.searchBar.textChanged.connect(self.proxy_model.setFilterRegExp)

    def mostrarTaller(self, dondeEstoy=None, quienSoy=None):
        self.model.removeRows(0, self.model.rowCount())

        a = self.coordinador.obtenerMaquinaria()
        #print(a)

        if dondeEstoy is not None:
            a = [taller for taller in a if taller['Concesionario'] == dondeEstoy]
        

        columnas = ["IDmaquinaria", "Maquinaria", "Cantidad", "Concesionario"]
        self.model.setHorizontalHeaderLabels(columnas)
        for fila in a:
            items = [
                QStandardItem(str(fila['IDmaquinaria'])),
                QStandardItem(str(fila['Maquinaria'])),
                QStandardItem(str(fila['Cantidad'])),
                QStandardItem(str(fila['Concesionario']))
            ]
            self.model.appendRow(items)

        # Actualizar la vista
        self.tableView.resizeColumnsToContents()

        # Conectar la barra de búsqueda con el filtro del modelo
        self.searchBar.textChanged.connect(self.proxy_model.setFilterRegExp)
