# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VentanaConcesionario.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSortFilterProxyModel
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtCore import QTimer
from src.modelo.vo.VentasVO import Venta
from src.vista.funciones import *



class Ui_MainWindow8(object):
    def __init__(self, coord=None):
        self.coordinador = coord
        self.rojo = "#ff0000"
        self.verde = "#00FF00"
        #self.textoIncorrecto = "Revisa el formato"
        #self.error = "Error al añadir o modicar un concesionario"
        #self.error2 = "Revisa el nombre"
        self.completado = "Accion completada con exito"


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1240, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1240, 720))
        #self.label.setStyleSheet("background-image: url(:/direccion/nissan_skyline_gt_r_r34-HD2.jpg);")
        self.label.setText("")
        #self.label.setPixmap(QtGui.QPixmap(":/direccion/nissan_skyline_gt_r_r34-HD2.jpg"))
        self.label.setScaledContents(False)
        self.label.setObjectName("label")

        self.c = concesionario(self.centralwidget)

        self.aniadirVen = QtWidgets.QPushButton(self.centralwidget)
        self.aniadirVen.setGeometry(QtCore.QRect(40, 650, 151, 41))
        self.aniadirVen.setObjectName("aniadirVen")
        
        self.eliminarVen = QtWidgets.QPushButton(self.centralwidget)
        self.eliminarVen.setGeometry(QtCore.QRect(230, 650, 151, 41))
        self.eliminarVen.setObjectName("eliminarVen")
        
        
        self.ModificarVen = QtWidgets.QPushButton(self.centralwidget)
        self.ModificarVen.setGeometry(QtCore.QRect(420, 650, 151, 41))
        self.ModificarVen.setObjectName("ModificarVen")
        
        self.BuscarVen = QtWidgets.QPushButton(self.centralwidget)
        self.BuscarVen.setGeometry(QtCore.QRect(620, 650, 151, 41))
        self.BuscarVen.setObjectName("BuscarVen")
        
        self.frameAniaidir = QtWidgets.QFrame(self.centralwidget)
        self.frameAniaidir.setEnabled(True)
        self.frameAniaidir.setGeometry(QtCore.QRect(360, 30, 520, 541))

        self.frameAniaidir.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameAniaidir.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameAniaidir.setObjectName("frameAniaidir")

        self.IDventa = QtWidgets.QLabel(self.frameAniaidir)
        self.IDventa.setGeometry(QtCore.QRect(26, 10, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDventa.setFont(font)
        
        
        self.LineaID = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaID.setGeometry(QtCore.QRect(26, 70, 220, 31))
        self.LineaID.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        
        self.fechaVenta = QtWidgets.QLabel(self.frameAniaidir)
        self.fechaVenta.setGeometry(QtCore.QRect(26, 110, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.fechaVenta.setFont(font)
        
        
        self.LineafechaVenta = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineafechaVenta.setGeometry(QtCore.QRect(26, 170, 220, 31))
        self.LineafechaVenta.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineafechaVenta.setText("")
        self.LineafechaVenta.setObjectName("LineafechaVenta")


        self.IDvehiculo = QtWidgets.QLabel(self.frameAniaidir)
        self.IDvehiculo.setGeometry(QtCore.QRect(26, 210, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDvehiculo.setFont(font)
        
        
        self.LineaIDvehiculo = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaIDvehiculo.setGeometry(QtCore.QRect(26, 270, 220, 31))
        self.LineaIDvehiculo.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaIDvehiculo.setText("")
        self.LineaIDvehiculo.setObjectName("LineaIDvehiculo")
        
        self.repara = QtWidgets.QLabel(self.frameAniaidir)
        self.repara.setGeometry(QtCore.QRect(26, 310, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.repara.setFont(font)
        
        
        self.Linearepara = QtWidgets.QLineEdit(self.frameAniaidir)
        self.Linearepara.setGeometry(QtCore.QRect(26, 370, 220, 31))
        self.Linearepara.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.Linearepara.setText("")
        self.Linearepara.setObjectName("Linearepara")
        
        self.IDcliente = QtWidgets.QLabel(self.frameAniaidir)
        self.IDcliente.setGeometry(QtCore.QRect(273, 10, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IDcliente.setFont(font)
        
        
        self.LineaIDcliente = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaIDcliente.setGeometry(QtCore.QRect(273, 70, 220, 31))
        self.LineaIDcliente.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaIDcliente.setText("")
        self.LineaIDcliente.setObjectName("LineaIDcliente")

        self.piezas = QtWidgets.QLabel(self.frameAniaidir)
        self.piezas.setGeometry(QtCore.QRect(273, 110, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.piezas.setFont(font)
        
        
        self.LineaPiezas = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaPiezas.setGeometry(QtCore.QRect(273, 170, 220, 31))
        self.LineaPiezas.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaPiezas.setText("")
        self.LineaPiezas.setObjectName("LineaPiezas")


        self.cantidad = QtWidgets.QLabel(self.frameAniaidir)
        self.cantidad.setGeometry(QtCore.QRect(273, 210, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cantidad.setFont(font)
        

        self.Lineacantidad = QtWidgets.QLineEdit(self.frameAniaidir)
        self.Lineacantidad.setGeometry(QtCore.QRect(273, 270, 220, 31))
        self.Lineacantidad.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.Lineacantidad.setText("")
        self.Lineacantidad.setObjectName("Lineacantidad")
        


        self.Concesionario = QtWidgets.QLabel(self.frameAniaidir)
        self.Concesionario.setGeometry(QtCore.QRect(273, 310, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Concesionario.setFont(font)
        

        self.LineaConc = QtWidgets.QLineEdit(self.frameAniaidir)
        self.LineaConc.setGeometry(QtCore.QRect(273, 370, 220, 31))
        self.LineaConc.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaConc.setText("")
        self.LineaConc.setObjectName("LineaConc")

        self.botonAniadirModificar = QtWidgets.QPushButton(self.frameAniaidir)
        self.botonAniadirModificar.setGeometry(QtCore.QRect(210, 500, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonAniadirModificar.setFont(font)
        self.botonAniadirModificar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        self.botonAniadirModificar.setText("")
        self.botonAniadirModificar.setObjectName("AniadirModificar")
        
        self.Incorrecto = QtWidgets.QLabel(self.frameAniaidir)
        self.Incorrecto.setEnabled(True)
        self.Incorrecto.setGeometry(QtCore.QRect(10, 460, 500, 21))
        self.Incorrecto.setObjectName("Incorrecto")
        
        
        
        



        #FRAME 2 HECHO UNICAMENTE PARA EL BOTON ELIMINAR
        self.frame2 = 2
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setEnabled(True)
        self.frame2.setGeometry(QtCore.QRect(460, 30, 301, 300))
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        
        self.botonEliminar = QtWidgets.QPushButton(self.frame2)
        self.botonEliminar.setGeometry(QtCore.QRect(100, 250, 100, 30))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.botonEliminar.setText("Eliminar")
        self.botonEliminar.setFont(font)
        self.botonEliminar.setStyleSheet("border: 2px solid white;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"color: white;")
        
        self.Nombre2 = QtWidgets.QLabel(self.frame2)
        self.Nombre2.setGeometry(QtCore.QRect(40, 20, 220, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Nombre2.setFont(font)
        

        self.LineaNombre2 = QtWidgets.QLineEdit(self.frame2)
        self.LineaNombre2.setGeometry(QtCore.QRect(40, 90, 220, 31))
        self.LineaNombre2.setStyleSheet("background-color:white;\n"
"\n"
"border: 2px solid gray;\n"
"border-radius: 10px; /* Ajusta el radio según tus preferencias */\n"
"padding: 5px; /* Opcional: ajusta el espaciado interior */\n"
"\n"
"")
        self.LineaNombre2.setText("")
        self.LineaNombre2.setObjectName("LineaNombre2")

        self.Incorrecto2 = QtWidgets.QLabel(self.frame2)
        self.Incorrecto2.setEnabled(True)
        self.Incorrecto2.setGeometry(QtCore.QRect(10, 220, 281, 21))
        self.Incorrecto2.setObjectName("Incorrecto2")
        self.Incorrecto2.setVisible(False)
        
        # Creación del QTableView para mostrar las columnas de la base de datos
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(305, 235, 630, 250))
        self.tableView.setObjectName("tableView")

        # Barra de búsqueda
        self.searchBar = QtWidgets.QLineEdit(self.centralwidget)
        self.searchBar.setGeometry(QtCore.QRect(305, 200, 220, 31))
        self.searchBar.setPlaceholderText("Buscar...")
        self.searchBar.setStyleSheet("background-color:white;\n"
                                     "border: 2px solid gray;\n"
                                     "border-radius: 10px;\n"
                                     "padding: 5px;")
        self.searchBar.setObjectName("searchBar")

        # Configuración del modelo de la tabla
        self.model = QStandardItemModel()
        self.proxy_model = QSortFilterProxyModel()
        self.proxy_model.setSourceModel(self.model)
        self.proxy_model.setFilterKeyColumn(-1)  # Filtrar en todas las columnas
        self.proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)

        self.tableView.setModel(self.proxy_model)

        MainWindow.setCentralWidget(self.centralwidget)

        #check box del modo oscuro, igual que el de ventanaAdmin
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(10, 10, 141, 61))
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")
        

        #cargo el boton atras
        self.atras = setAtras(self.centralwidget)
        self.ayuda = ayuda(self.centralwidget, "Ventana ventas")



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

        #Nombres de cada texto (para el modo oscuro/claro)
        self.IDventa.setObjectName("IDventa")
        self.fechaVenta.setObjectName("Fecha venta")
        self.IDvehiculo.setObjectName("IDvehiculo")
        self.repara.setObjectName("Repara")
        self.IDcliente.setObjectName("IDcliente")
        self.piezas.setObjectName("Piezas")
        self.cantidad.setObjectName("Cantidad")
        self.Concesionario.setObjectName("Concesionario")
        self.Nombre2.setObjectName("IDventa") #esto es para lo de eliminar


        #muestra una pequenia ayuda al poner el raton sobre el boton
        self.aniadirVen.setToolTip("Añadir venta")
        self.eliminarVen.setToolTip("Eliminar venta")
        self.ModificarVen.setToolTip("Modificar venta")
        self.BuscarVen.setToolTip("Buscar venta")

        self.LineaID.setText("")
        self.LineafechaVenta.setText("")
        self.LineaIDvehiculo.setText("")
        self.Linearepara.setText("")
        self.LineaIDcliente.setText("")
        self.LineaPiezas.setText("")
        self.Lineacantidad.setText("")
        self.LineaConc.setText("")


        self.lista = [self.aniadirVen, self.eliminarVen, self.BuscarVen, self.ModificarVen, self.botonEliminar, self.Nombre2, self.botonAniadirModificar]
        self.listaFrames = [self.frameAniaidir, self.frame2]
        self.listaTexto = [self.IDventa, self.fechaVenta, self.IDvehiculo, self.repara, self.piezas, self.cantidad, self.IDcliente, self.Concesionario, self.Nombre2]
        
        
        
        #POR DEFECTO ACTIVO EL MODO OSCURO
        self.checkBox.stateChanged.connect(lambda: modoClOs(self.checkBox, self.label, self.lista, self.listaFrames, self.listaTexto, self.ayuda))
        modoClOs(self.checkBox, self.label, self.lista, self.listaFrames, self.listaTexto, self.ayuda)
        
        self.visible()
        #self.mostrasConcesionarios()
       

    def visible(self):
        self.frameAniaidir.setVisible(False)
        self.frame2.setVisible(False)
        self.tableView.setVisible(False)
        self.searchBar.setVisible(False)
        self.ayuda.setVisible(False)
        
        self.aniadirVen.clicked.connect(lambda: toggle_frame_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))
        self.aniadirVen.clicked.connect(lambda: actualizarBotonFrame("Añadir", self.botonAniadirModificar))
        self.aniadirVen.clicked.connect(lambda: self.LineaID.setText("Se asigna automaticamente"))


        self.eliminarVen.clicked.connect(lambda: frame2_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))
        
        self.ModificarVen.clicked.connect(lambda: toggle_frame_visibility(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))
        self.ModificarVen.clicked.connect(lambda: actualizarBotonFrame("Modificar", self.botonAniadirModificar))
        self.ModificarVen.clicked.connect(lambda: self.LineaID.setText(""))

        self.BuscarVen.clicked.connect(lambda: tablaYbusquedaVisibilidad(self.frameAniaidir, self.frame2, self.tableView, self.searchBar, self.ayuda))


    def setCoordinador(self, coord):
        self.coordinador = coord
    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Ventas"))
        self.aniadirVen.setText(_translate("MainWindow", "Añadir venta"))
        self.eliminarVen.setText(_translate("MainWindow", "Eliminar venta"))
        self.ModificarVen.setText(_translate("MainWindow", "Modificar venta"))
        self.BuscarVen.setText(_translate("MainWindow", "Buscar venta"))
        self.checkBox.setText(_translate("MainWindow", "Modo oscuro"))


######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################
######################################################################################################################################################


    #FUNCIONES QUE TIENEN ALGUNA FUNCIONALIDAD COMO LEER DATOS, PASARLOS A COORDINADOR, ETC
    def obtener_datos_ingresados(self, dondeEstoy=None):
        anadirModificar = Venta(
           IDventa= self.LineaID.text(),
           FechaVenta= self.LineafechaVenta.text(),
           IDvehiculo= self.LineaIDvehiculo.text(),
           Repara=self.Linearepara.text(),
           IDcliente=self.LineaIDcliente.text(),
           Piezas=self.LineaPiezas.text(),
           Cantidad=self.Lineacantidad.text(),
           Concesionario=self.LineaConc.text(),
        )

        eliminar = Venta(
            IDventa=self.LineaNombre2.text()
        )
        print(anadirModificar.Cantidad)
        
        if anadirModificar.FechaVenta != "":
            if self.botonAniadirModificar.text() == "Añadir":
                a = self.coordinador.registrarVenta(anadirModificar, "aniadir") 
                if a[0] == "Error":
                    actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                    show_incorrecto_for_5_seconds(self.Incorrecto)
                else:
                    actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                    show_incorrecto_for_5_seconds(self.Incorrecto)
                    
            elif self.botonAniadirModificar.text() == "Modificar":
                a = self.coordinador.registrarVenta(anadirModificar, "modificar")
                if a[0] == "Error":
                    actualizarTextoIncorrecto2(self.Incorrecto, self.rojo, a[1])
                    show_incorrecto_for_5_seconds(self.Incorrecto)
                else:
                    actualizarTextoIncorrecto2(self.Incorrecto, self.verde, self.completado)
                    show_incorrecto_for_5_seconds(self.Incorrecto)
            
            self.LineaID.setText("")
            self.LineafechaVenta.setText("")
            self.LineaIDvehiculo.setText("")
            self.Linearepara.setText("")
            self.LineaIDcliente.setText("")
            self.LineaPiezas.setText("")
            self.Lineacantidad.setText("")
            if dondeEstoy is None:
                self.LineaConc.setText("")
            


        if eliminar.IDventa != "":
            a = self.coordinador.registrarVenta(eliminar, "eliminar")
            #print(a)
            if a[0] == "Error":
                actualizarTextoIncorrecto2(self.Incorrecto2, self.rojo, a[1])
                show_incorrecto_for_5_seconds(self.Incorrecto2)
                
            else:
                actualizarTextoIncorrecto2(self.Incorrecto2, self.verde, self.completado)
                show_incorrecto_for_5_seconds(self.Incorrecto2)
                #self.mostrasConcesionarios()
            
            self.LineaNombre2.setText("")

        
        

    def mostrarVentas(self, dondeEstoy=None, quienSoy=None):
        self.model.removeRows(0, self.model.rowCount())
        a = self.coordinador.obtenerVentas()

        if dondeEstoy is not None:
            a = [venta for venta in a if venta['Concesionario'] == dondeEstoy]
        if quienSoy in ['dad']:
            pass

        columnas = ["IDventa", "FechaVenta", "IDvehiculo", "Repara", "IDcliente", "Piezas", "Cantidad", "Concesionario"]
        self.model.setHorizontalHeaderLabels(columnas)
        for fila in a:
            items = [
                QStandardItem(str(fila['IDventa'])),
                QStandardItem(fila['FechaVenta']),
                QStandardItem(str(fila['IDvehiculo'])),
                QStandardItem(str(fila['Repara'])),
                QStandardItem(str(fila['IDcliente'])),
                QStandardItem(str(fila['Piezas'])),
                QStandardItem(str(fila['Cantidad'])),
                QStandardItem(fila['Concesionario']),
            ]
            self.model.appendRow(items)

        # Actualizar la vista
        self.tableView.resizeColumnsToContents()

        # Conectar la barra de búsqueda con el filtro del modelo
        self.searchBar.textChanged.connect(self.proxy_model.setFilterRegExp)




    
            
        